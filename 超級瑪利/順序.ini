遊戲具備 僅可增加的map x

遊戲檔案檢查
while << 遊戲主迴圈 

    按鍵(上左右) >> 加速度  loopstage == 1
    加速度(x, y) >> 速度    loopstage == 2
    阻力(x方向) >> 速度     loopstage == 3

    for (速度x拆分成0.01*n)            << 用途:原本 腳色x-速度x 
        loopstage == 4
        碰撞(偵測x) >> improt檔案 >> 回傳碰撞數值 << 邏輯:這一次移動是否碰撞且位於何，會碰撞則停止這次碰撞撞牆則設定碰速度歸零
        碰撞(偵測x) >> 左(物體的) if player_x + math.copysign(0.001, velocity_x) > (object_1_x-player_sizex) return 1
        碰撞(偵測x) >> 右(物體的) if player_x + math.copysign(0.001, velocity_x) < (object_1_x+object_1_sizex) return -1
    

        if 碰撞0
            速度方向*0.01 >> 腳色x
    
    for (速度y拆分成0.01*n) 
        loopstage == 5
        碰撞(偵測y) 
        碰撞(偵測y) >> 上(物體的) if player_y + math.copysign(0.001, velocity_y) > (object_1_y-player_sizey) return -1
        碰撞(偵測y) >> 下(物體的) if player_y + math.copysign(0.001, velocity_y) < (object_1_y+object_1_sizey) return 1

        if 碰撞0 or 1
            速度方向*0.01 >> 腳色y






地圖檔說明 << 先建立物體圖形，以矩形為主 
    命名方式 << 物件 n 的x座標(object_n_x)
                物件 n 的y座標(object_n_y)
                物件 n 的x方向寬度(object_n_sizex)
                物件 n 的y方向寬度(object_n_sizey)
    建立順序 << 建立圖形的座標及XY寬度(以左上角為(0, 0)) > 建立地圖(不動的) > 建立機關 > 建立腳色出場位置 

建立文本 << 紀錄當前遊戲狀態
            場景觸發狀況
            腳色死亡次數
            遊戲進度
地圖繪製工具 << 還沒有明確想法，之後再做





地圖檔具備 >> 地圖(不動) 
              陷阱機關(移動物件EX:香菇、突然出現的方塊)
              腳色出場位置
              過關條件

地圖 >> (塞在 for (x 移動 & y 移動))
    def map_n (player_x, velocity_x, player_y, velocity_y, height, player_sizey, map_x, loopstage) :
    物件名稱 >> (觸發的機關於事件中建立)
        def map_1 (player_x, velocity_x, player_y, velocity_y, height, player_sizey, map_x, loopstage) :
    object = [ << 以視窗左下角作為(0, 0)建立物件
        [object_1_x, height - object_1_y, object_1_weigh, objet_1_hight]
        [object_2_x, height - object_2_y, object_2_weigh, objet_2_hight]
        [object_3_x, height - object_3_y, object_3_weigh, objet_3_hight]
                                :
                                :
                                :
        [object_n_x, object_n_y, object_n_weigh, objet_n_hight]
    ]
    物件碰撞判斷 >> 
        if loopstage == 4 :
            碰撞(偵測x) >> 左(物體的) if player_x + math.copysign(0.001, velocity_x) > (object_1_x-player_sizex) collision_x 1
            碰撞(偵測x) >> 右(物體的) if player_x + math.copysign(0.001, velocity_x) < (object_1_x+object_1_sizex) collision_x -1
        if loopstage == 5 :
            碰撞(偵測y) >> 上(物體的) if player_y + math.copysign(0.001, velocity_y) > (object_1_y-player_sizey) collision_y -1
            碰撞(偵測y) >> 下(物體的) if player_y + math.copysign(0.001, velocity_y) < (object_1_y+object_1_sizey) collision_y 1
        return [collision_x, collision_y]
    物件繪製 >> 
        
        繪製物件 << 位置為(map_x, y) map_x以最左邊為0
        可導入貼圖
    事件 >> 
cd Cat-Mario/
git add .
git commit -m "記錄檔名稱(日期或更新內容都行)"
git push
git config --global user.email "你的Gmail"
git config --global user.name "暱稱"